//
// Copyright 2016, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.server.storage;

option java_package = "org.spine3.server.storage";
option java_outer_classname = "AggregateStorageProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

option (SPI_all) = true;
option (type_url_prefix) = "type.spine3.org";

import "google/protobuf/timestamp.proto";

import "spine/server/aggregate/snapshot.proto";
import "spine/base/event.proto";
import "spine/annotations.proto";

// A record in the storage of events and snapshots of an aggregate type.
//
// Different types of aggregates are managed by different storages.
message AggregateStorageRecord {
    // A timestamp of the event or snapshot in this record.
    google.protobuf.Timestamp timestamp = 1;

    // A short Protobuf type name of the event.
    string event_type = 2;

    // String representation of `EventId`.
    string event_id = 3;

    // The version of the aggregate after the event was applied.
    int32 version = 4;

    reserved 5 to 19;

    oneof kind {
        // Event stored in the record, or...
        base.Event event = 20;

        // Snapshot of the aggregate.
        server.aggregate.Snapshot snapshot = 21;
    }
}

// Event data for an aggregate returned by a storage managing the aggregate.
message AggregateEvents {
    // If the `snapshot` field is populated, it contains the last snapshot in the history of the aggregate.
    // This value will be used for restoring the aggregate state before playing events that occurred
    // after this snapshot was made.
    server.aggregate.Snapshot snapshot = 1;

    // Events of the aggregate.
    //
    // If `snapshot` field is populated, events represent the 'tail' of the event history of the aggregate.
    // Otherwise, events are full history of the aggregate.
    repeated base.Event event = 2;
}
