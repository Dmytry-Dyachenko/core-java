//
// Copyright 2016, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.server.storage;

option java_package = "org.spine3.server.storage";
option java_multiple_files = true;
option java_outer_classname = "CommandStoreProto";
option java_generate_equals_and_hash = true;

option (SPI_all) = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

import "spine/base/command.proto";
import "spine/base/error.proto";
import "spine/base/failure.proto";
import "spine/annotations.proto";

// This type defines the way commands are stored in command storage.
// Some of the fields are defined as string representation of corresponding message types
// so that these fields are available for querying.
message CommandStorageRecord {
    // A moment of time when this storage record was created.
    google.protobuf.Timestamp timestamp = 1;

    // A short name of Protobuf command type.
    string command_type = 2;

    // String representation of CommandId.
    string command_id = 3;

    // The status of the command processing.
    base.CommandStatus status = 4;

    // `status_data` provides additional information on what went wrong
    // if the value of `status` is `ERROR` or `FAILURE`.
    oneof status_data {
        // The technical error occurred during command processing.
        base.Error error = 5;

        // A business failure occurred during command processing.
        base.Failure failure = 6;
    }

    reserved 7 to 9;

    // A short Protobuf type name of the command target entity ID.
    //
    // If the command is not for an entity, this field is an empty string.
    // We store the type of entity ID, not the type of the entity itself,
    // because it is not available at the level of commands.
    string target_id_type = 10;

    // String representation of the command target entity ID.
    //
    // If the command is not for an entity, this field is an empty string.
    string target_id = 11;

    reserved 12 to 19;

    // The command instance.
    google.protobuf.Any message = 20;

    // The context of the command.
    base.CommandContext context = 21;
}
