/*
 * Copyright 2017, TeamDev Ltd. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.spine3.server.command;

import com.google.common.collect.ImmutableSet;
import com.google.protobuf.Any;
import com.google.protobuf.Message;
import org.spine3.base.CommandClass;
import org.spine3.base.CommandContext;
import org.spine3.base.CommandEnvelope;
import org.spine3.base.Event;
import org.spine3.protobuf.AnyPacker;
import org.spine3.server.event.EventBus;
import org.spine3.server.reflect.CommandHandlerMethod;

import javax.annotation.Nullable;
import java.util.List;
import java.util.Set;

import static org.spine3.protobuf.Values.newStringValue;

/**
 * The abstract base for non-aggregate classes that expose command handling methods
 * and post their results to {@link EventBus}.
 *
 * <p>This class implements {@code CommandDispatcher} dispatching messages
 * to methods declared in the derived classes.
 *
 * @author Alexander Yevsyukov
 * @see org.spine3.server.aggregate.Aggregate Aggregate
 * @see CommandDispatcher
 */
public abstract class AbstractCommandHandler implements CommandHandler {

    /**
     * The {@code EventBut} to which the handler posts events it produces.
     */
    private final EventBus eventBus;

    /**
     * Fully qualified name of the class wrapped into {@code Any}.
     *
     * @see CommandHandler#getProducerId()
     */
    private final Any producerId;

    /**
     * Cached set of the command classes this handler can handle.
     */
    @Nullable
    private Set<CommandClass> commandClasses;

    /**
     * Creates a new instance of the command handler.
     *
     * @param eventBus the {@code EventBus} to post events generated by this handler
     */
    protected AbstractCommandHandler(EventBus eventBus) {
        this.eventBus = eventBus;
        this.producerId = AnyPacker.pack(newStringValue(getClass().getName()));
    }

    @Override
    public Any getProducerId() {
        return producerId;
    }

    @Override
    public EventBus getEventBus() {
        return eventBus;
    }

    /**
     * Dispatches the command to the handler method and
     * posts resulting events to the {@link EventBus}.
     *
     * @param envelope the command to dispatch
     * @throws IllegalStateException if an exception occurred during command dispatching
     *                               with this exception as the cause
     */
    @Override
    public void dispatch(CommandEnvelope envelope) {
        handle(envelope.getMessage(), envelope.getCommandContext());
    }

    @SuppressWarnings("ReturnOfCollectionOrArrayField") // OK as we return immutable impl.
    @Override
    public Set<CommandClass> getMessageClasses() {
        if (commandClasses == null) {
            commandClasses = ImmutableSet.copyOf(
                    CommandHandlerMethod.getCommandClasses(getClass()));
        }
        return commandClasses;
    }

    /**
     * Dispatches the command to the handler method and
     * posts resulting events to the {@link EventBus}.
     *
     * @param commandMessage the command message
     * @param context        the command context
     * @throws IllegalStateException if an exception occurred during command dispatching
     *                               with this exception as the cause
     */
    void handle(Message commandMessage, CommandContext context) {
        final List<? extends Message> eventMessages =
                CommandHandlerMethod.invokeHandler(this, commandMessage, context);
        final List<Event> events = toEvents(eventMessages, context);
        postEvents(events);
    }

    private List<Event> toEvents(List<? extends Message> eventMessages,
                                 CommandContext commandContext) {
        return CommandHandlerMethod.toEvents(producerId,
                                             null,
                                             eventMessages,
                                             commandContext);
    }

    /** Posts passed events to {@link EventBus}. */
    private void postEvents(Iterable<Event> events) {
        for (Event event : events) {
            eventBus.post(event);
        }
    }

    @Override
    @SuppressWarnings({"ConstantConditions" /* we compare with `null` */,
                       "MethodDoesntCallSuperMethod" /* OK as our state is only ID */})
    public boolean equals(Object otherObj) {
        if (this == otherObj) {
            return true;
        }
        if (otherObj == null ||
            getClass() != otherObj.getClass()) {
            return false;
        }
        final AbstractCommandHandler otherHandler = (AbstractCommandHandler) otherObj;
        final boolean equals = getMessageClasses().equals(otherHandler.getMessageClasses());
        return equals;
    }

    @SuppressWarnings("MethodDoesntCallSuperMethod") // OK as our state is only ID
    @Override
    public int hashCode() {
        final int result = getMessageClasses().hashCode();
        return result;
    }
}
