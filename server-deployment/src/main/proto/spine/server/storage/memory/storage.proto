//
// Copyright 2017, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.server.storage.memory;

option (type_url_prefix) = "type.spine.io";
option java_generate_equals_and_hash = true;
option java_multiple_files = true;
option java_outer_classname = "StorageProto";
// Put generated code under the 'grpc' sub-package, which is annotated @SPI.
option java_package = "io.spine.server.storage.memory.grpc";

import "google/protobuf/timestamp.proto";

import "spine/options.proto";
import "spine/client/entities.proto";
import "spine/base/event.proto";
import "spine/base/response.proto";
import "spine/base/tenant_id.proto";
import "spine/server/entity/entity.proto";
import "spine/server/event/event_stream_query.proto";

// Read/Write/Find request for a Record Storage.
message RecordStorageRequest {

    // The ID of a tenant.
    spine.base.TenantId tenant_id = 1;

    // The type URL of the entity state.
    string entity_state_type_url = 2;

    oneof kind {
        // The ID of the entity to read.
        spine.client.EntityId read = 3;

        // The record to store.
        server.entity.EntityRecord write = 4;

        // Find multiple records.
        spine.client.EntityFilters query = 5;
    }
}

// The service to read/write/find entity records.
service RecordStorageService {
    option (SPI_service) = true;

    // Reads `EntityRecord` by the passed ID.
    rpc Read(RecordStorageRequest) returns (server.entity.EntityRecord);

    // Writes `EntityRecord` to the storage.
    rpc Write(RecordStorageRequest) returns (base.Response);

    // Finds records matching `EntityFilters`.
    rpc Find(RecordStorageRequest) returns (stream server.entity.EntityRecord);
}

// The request to write last handled event timestamp for a projection repository.
message LastHandledEventRequest {
    spine.base.TenantId tenant_id = 1;
    string projection_state_type_url = 2;
    google.protobuf.Timestamp timestamp = 3;
}

// Read/Write service for projection repositories.
service ProjectionStorageService {
    option (SPI_service) = true;

    // Reads `EntityRecord` by the passed ID.
    rpc Read(RecordStorageRequest) returns (server.entity.EntityRecord);

    // Writes `EntityRecord` to the storage.
    rpc Write(RecordStorageRequest) returns (base.Response);

    // Reads the timestamp of the last handled event.
    rpc ReadLastHandledEventTimestamp(LastHandledEventRequest) returns (google.protobuf.Timestamp);

    // Writes the timestamp of the last handled event.
    rpc WriteLastHandledEventTimestamp(LastHandledEventRequest) returns (base.Response);
}
