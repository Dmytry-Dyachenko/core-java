//
// Copyright 2016, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.server;

option java_generate_equals_and_hash = true;
option java_multiple_files = true;
option java_outer_classname = "EventStoreProto";
option java_package = "org.spine3.server";

import public "spine/base/event.proto";
import public "spine/base/response.proto";

// A list of event records.
message EventRecords {
    repeated spine.base.EventRecord record = 1;
}

// `EventStore` service allows to store events and read them via steams.
service EventStore {
    // Request to append event records to the stream.
    rpc Append(EventRecords) returns (spine.base.Response);

    // Subscribes the client to receive events happened after the passed timestamp.
    //
    // Passing the default instance of `Timestamp` will return *all* events.
    rpc SubscribeSince(google.protobuf.Timestamp) returns (stream spine.base.EventRecord);

    // Subscribes the client to receive events occurred after this call.
    rpc Subscribe(google.protobuf.Empty) returns (stream spine.base.EventRecord);
}