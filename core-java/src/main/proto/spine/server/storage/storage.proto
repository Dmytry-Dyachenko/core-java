//
// Copyright 2015, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.server.storage;

option java_generate_equals_and_hash = true;
option java_multiple_files = true;
option java_outer_classname = "StorageProto";
option java_package = "org.spine3.server.storage";

import public "spine/server/aggregate/snapshot.proto";
import public "spine/base/command.proto";


// A record in the storage of events and snapshots of an aggregate type.
//
// Different types of aggregates are managed by different storages.
message AggregateStorageRecord {
    // A timestamp of an event or a snapshot in this record.
    google.protobuf.Timestamp timestamp = 1;

     // string representation of an aggregate id.
    string aggregate_id = 2;

    // The type of the event as a fully-qualified Protobuf type name.
    string event_type = 3;

    // String representation of EventId.
    string event_id = 4;

    // The version of the aggregate after the event was applied.
    int32 version = 5;

    reserved 6 to 19;

    oneof kind {
        // Event data and context.
        spine.base.EventRecord event_record = 20;

        // Snapshot of the aggregate.
        spine.server.aggregate.Snapshot snapshot = 21;
    }
}

// Event data for an aggregate returned by a storage managing the aggregate.
message AggregateEvents {
     // If present, Snapshot will be used for restoring aggregate state before playing other events.
     spine.server.aggregate.Snapshot snapshot = 1;

     // Event records for the aggregate.
     //
     // If `snapshot` field is present, event records represent a 'tail' of event history of the aggregate.
     // Otherwise, records are full history of the aggregate.
     repeated spine.base.EventRecord event_record = 2;
}

// This type defines the way events are stored in EventStore.
// Some of the fields are defined as string representation of corresponding message types
// so that these fields are available for querying.
message EventStoreRecord {
    // A moment of time when the event occurred.
    google.protobuf.Timestamp timestamp = 1;

    // The type of the event as a fully-qualified Protobuf type name.
    string event_type = 2;

    // String representation of ID of the aggregate, which generated the event.
    //
    // This field is empty, if the event is not from an aggregate.
    string aggregate_id = 3;

    // String representation of EventId.
    string event_id = 4;

    reserved 5 to 19;

    // Event instance.
    google.protobuf.Any event = 20;

    // Event context.
    spine.base.EventContext context = 21;
}

// This type defines the way commands are stored in CommandStore.
// Some of the fields are defined as string representation of corresponding message types
// so that these fields are available for querying.
message CommandStoreRecord {
    // A moment of time when the command was created.
    google.protobuf.Timestamp timestamp = 1;

    // The type of the command as a fully-qualified Protobuf type name.
    string command_type = 2;

    // String representation of CommandId.
    string command_id = 3;

    // Fully-qualified Protobuf type name of the aggregate the command is for.
    //
    // If the command is not for an aggregate, this field is empty.
    string aggregate_type = 4;

    // String representation of the ID of the aggregate for which the command is for.
    //
    // This field is empty if the command is not for an aggregate.
    string aggregate_id = 5;

    reserved 6 to 19;

    // The command instance.
    google.protobuf.Any command = 20;

    // The context of the command.
    spine.base.CommandContext context = 21;
}