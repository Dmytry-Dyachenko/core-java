//
// Copyright 2015, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.base;

option java_generate_equals_and_hash = true;
option java_multiple_files = true;
option java_outer_classname = "CommandServiceProtoNew";
option java_package = "org.spine3.client";

import public "google/protobuf/empty.proto";
import public "spine/base/command.proto";

// Command execution request.
message CommandRequest {
    // Any instance of the Protobuf message can be sent as a command.
    google.protobuf.Any command = 1;

    // The context of the command.
    CommandContext context = 2;
}

// The result of passing CommandRequest to the service.
message CommandResponse {
    oneof value {
        // The command was accepted to execution.
        google.protobuf.Empty ok = 1;

        // The message of the error occurred upon receiving the request.
        Error error = 2;
    }

    // Information on an error reported by the server on attempt to handle CommandRequest.
    message Error {

        enum Code {
            // Reserved value.
            UNKNOWN = 0;

            // The command type is not supported by the server.
            UNSUPPORTED_COMMAND = 1;

            // The command is supported but not all fields are complete.
            INCOMPLETE_COMMAND = 2;
        }

        // The code of the error.
        Code code = 1;

        // A developer-readable diagnostics message from the server.
        string message = 2;
    }
}

//TODO:2015-12-10:alexander.yevsyukov: Uncomment this block when grpc/src/main/proto/command_service.proto is addressed.

// A service for sending commands from clients.
 service CommandServiceNew {
    rpc Handle(CommandRequest) returns (CommandResponse);
 }
