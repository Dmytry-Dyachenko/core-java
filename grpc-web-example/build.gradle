final def appEngineVersion = '1.9.30'

buildscript {
    dependencies {
        classpath "org.spine3.tools:proto-lookup-plugin:1.0"
        classpath 'com.google.appengine:gradle-appengine-plugin:1.9.30'
    }
}

apply plugin: 'war'
apply plugin: 'appengine'

dependencies {
    // Currently for StreamObserver interface only
    compile 'io.grpc:grpc-all:0.9.0'

    // App Engine
    compile "com.google.appengine:appengine-api-1.0-sdk:${appEngineVersion}"
    appengineSdk "com.google.appengine:appengine-java-sdk:${appEngineVersion}"

    compile project(':grpc-web')

    protobuf project(":core-java")
    protobuf "com.google.protobuf:protobuf-java:3.0.0-beta-2"
}

apply plugin: 'org.spine3.tools.protolookup'

appengine {
    httpPort = 8080
    downloadSdk = true

    jvmFlags = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005']

    appcfg {
        noCookies = true
        oauth2 = true
    }
}

sourceSets {
    main {
        java.srcDirs += ["generated/spine/java"]
//        java.srcDirs = ["generated/main/java", "generated/spine/java", "src/main/java"]
        resources.srcDirs += "generated/spine/resources"
    }
}

task prepareJsLibrary(dependsOn: processResources) {
    final def libraryName = "library"
    final def tempProtoPath = "$projectDir/build/temp-all-protos"
    final def incProtos = "$projectDir/build/extracted-include-protos/main"
    final def srcProtos = "$projectDir/src/main/proto"

    project.mkdir(tempProtoPath)

    copy {
        from(incProtos, srcProtos)

        into tempProtoPath
        include "**/*.proto"
    }

    final def execArguments = new ArrayList<String>()
    execArguments.addAll(["protoc", "--proto_path=.", "--js_out=library=$libraryName,binary:."])
    final def tempProtoPathLength = tempProtoPath.length()

    fileTree(tempProtoPath).include("**/*.proto").files.each {
        execArguments.add(it.absolutePath.substring(tempProtoPathLength + 1))
    }

    exec {
        workingDir tempProtoPath

        commandLine execArguments
    }

    copy {
        from(tempProtoPath)

        into "$projectDir/src/main/webapp/build/scripts/proto"
        include "${libraryName}.js"
    }
    project.delete(tempProtoPath)
}

war.dependsOn(prepareJsLibrary)
