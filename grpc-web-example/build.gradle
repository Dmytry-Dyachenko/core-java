final def appEngineVersion = '1.9.30'

buildscript {
    dependencies {
        classpath "org.spine3.tools:proto-lookup-plugin:1.0"
        classpath 'com.google.appengine:gradle-appengine-plugin:1.9.30'
    }
}

apply plugin: 'war'
apply plugin: 'appengine'

dependencies {
    // Currently for StreamObserver interface only
    compile 'io.grpc:grpc-all:0.9.0'

    // App Engine
    compile "com.google.appengine:appengine-api-1.0-sdk:${appEngineVersion}"
    appengineSdk "com.google.appengine:appengine-java-sdk:${appEngineVersion}"

    compile project(':grpc-web')

    protobuf project(":core-java")
    protobuf "com.google.protobuf:protobuf-java:3.0.0-beta-2"
}

apply plugin: 'org.spine3.tools.protolookup'

appengine {
    httpPort = 8080
    downloadSdk = true

    jvmFlags = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005']

    appcfg {
        noCookies = true
        oauth2 = true
    }
}

sourceSets {
    main {
        java.srcDirs += ["generated/spine/java"]
//        java.srcDirs = ["generated/main/java", "generated/spine/java", "src/main/java"]
        resources.srcDirs += "generated/spine/resources"
    }
}

final def mergingProtos = new ArrayList<String>();

// This should become a part of a plugin
task mergeProtos() {
    final def extractedProtosDir = "$projectDir/build/extracted-protos/main";
    final def srcProtoDir = "$projectDir/src/main/proto";

    // DRY

    mergingProtos.clear();

    mergingProtos.addAll(["--proto_path=/Users/mmikhaylov/Code/core-java/grpc-web-example", "--js_out=library=library776492,binary:."] as String[]);

    final def extractedProtosRoot = new File(extractedProtosDir);
    fileTree(extractedProtosRoot).each {
        if (it.name.endsWith(".proto")) {
            mergingProtos.add(it.absolutePath.substring(78));
        }
    }

    final def srcProtoRoot = new File(srcProtoDir);
    fileTree(srcProtoRoot).each {
        if (it.name.endsWith(".proto")) {
            mergingProtos.add(it.absolutePath.substring(65));
        }
    }

}

task executePbjs(type: Exec, dependsOn: "mergeProtos") {
    executable "protoc"
    args mergingProtos
//    args "${mergingProtos.get(0)}", mergingProtos.get(1), "-t=proto", "-s=proto", "-p=$projectDir/build/extracted-protos/main",
//            "-p=$projectDir/src/main/proto", "-l"
//    args "-t=js", mergingProtos.join(" "), ">/Users/mmikhaylov/__TEMP/out.proto"
//    standardOutput = new FileOutputStream(new File("out.file"))
}

//task(":executePbjs").dependsOn(":mergeProtos")
