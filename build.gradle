final String CREDENTIALS_LOCATION = 'credentials.properties';

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.7'
    }
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'jacoco'

    group = 'org.spine3'
    version = '0.4.2-SNAPSHOT'
}

project.ext {
    // NOTE: when updating Protobuf dependency, please check that TypeToClassMap.buildProtobufNamesMap() method
    // is updated with new Message types introduced in the new version of Protobuf.
    PROTOBUF_VERSION = '3.0.0-beta-3';
    PROTOBUF_DEPENDENCY = "com.google.protobuf:protoc:${project.PROTOBUF_VERSION}";
    MAVEN_REPOSITORY_URL = 'http://maven.teamdev.com/repository/spine';
    SPINE_PROTOBUF_PLUGIN_VERSION = "1.4.2"
    GRPC_VERSION = '0.14.0'
}

def repositoryUserName = null;
def repositoryUserPassword = null;
final Properties properties = new Properties();
final File credentialsFile = file(CREDENTIALS_LOCATION);
if (credentialsFile.exists()) {
    properties.load(credentialsFile.newDataInputStream());
    repositoryUserName = properties.getProperty("user.name");
    repositoryUserPassword = properties.getProperty("user.password");
}

subprojects {

    buildscript {
        repositories {
            mavenLocal()
            maven {
                url = project.MAVEN_REPOSITORY_URL
            }
            mavenCentral()
        }
    }

    apply plugin: 'java';
    apply plugin: 'idea';
    apply plugin: 'com.google.protobuf';

    sourceCompatibility = 1.7;
    targetCompatibility = 1.7;

    // Set Java home to point to JDK7 in gradle.properties file.
    //
    // For Mac OS X, it looks like this:
    //
    // # suppress inspection "UnusedProperty"
    // org.gradle.java.home=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        compile group: 'com.google.guava', name: 'guava', version: '19.0'
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
        compile group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.12'

        compile group: 'com.google.protobuf', name: 'protobuf-java', version: project.PROTOBUF_VERSION
        compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: project.PROTOBUF_VERSION

        testCompile(group: 'junit', name: 'junit', version: '4.12') {
            exclude(module: 'hamcrest-core')
        }
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile 'org.mockito:mockito-core:2.+'
    }

    final String SRC_ROOT_DIR = "$projectDir/src";
    final String GEN_ROOT_DIR = "$projectDir/generated";
    final String GEN_MAIN_JAVA_DIR = "${GEN_ROOT_DIR}/main/java";
    final String GEN_TEST_JAVA_DIR = "${GEN_ROOT_DIR}/test/java";

    idea.module {
        generatedSourceDirs += file(GEN_MAIN_JAVA_DIR);
        testSourceDirs += file(GEN_TEST_JAVA_DIR);
    }

    sourceSets {
        main {
            proto.srcDirs = ["${SRC_ROOT_DIR}/main/proto"]
            java.srcDirs = [GEN_MAIN_JAVA_DIR, "${SRC_ROOT_DIR}/main/java"]
            resources.srcDirs = ["${GEN_ROOT_DIR}/main/resources"]
        }
        test {
            proto.srcDirs = ["${SRC_ROOT_DIR}/test/proto"]
            java.srcDirs = [GEN_TEST_JAVA_DIR, "${SRC_ROOT_DIR}/test/java"]
            resources.srcDirs = ["${GEN_ROOT_DIR}/test/resources"]
        }
    }

    protobuf {
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:$GRPC_VERSION"
            }
        }
        generatedFilesBaseDir = GEN_ROOT_DIR
        protoc {
            artifact = project.PROTOBUF_DEPENDENCY
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier "sources"
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        classifier "test"
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    check.dependsOn jacocoTestReport
}

task readPublishingCredentials << {
    if (repositoryUserName == null || repositoryUserPassword == null) {
        throw new InvalidUserDataException("Please set up valid credentials. " +
                "Credentials should be set in ${CREDENTIALS_LOCATION} file in the project\'s root.");
    }
    println "Publishing build as ${repositoryUserName}";
}

task publish << {}

void dependPublish(Project project) {
    final Set<Task> credentialsTasks = getTasksByName("readPublishingCredentials", false);
    project.getTasksByName("publish", false).each { final task ->
        task.dependsOn credentialsTasks;
    }
    publish.dependsOn project.getTasksByName("publish", false);
}

// Artifacts to publish
def publishingProjects = ["client", "server", "values", "testutil"];

publishingProjects.each {
    project(":$it") { currentProject ->

        apply plugin: 'maven-publish';

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    groupId = "${group}";
                    artifactId = "${currentProject.name}";
                    version = "${currentProject.version}";

                    from components.java;

                    artifact sourceJar;
                    artifact testOutputJar;
                }
            }
        }

        publishing {
            repositories {
                maven {
                    credentials {
                        username = "${repositoryUserName}";
                        password = "${repositoryUserPassword}";
                    }
                    url = project.MAVEN_REPOSITORY_URL;
                }
            }
        }

        dependPublish(project);
    }
}
