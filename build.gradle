buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
//        maven {
//            url 'https://oss.sonatype.org/content/repositories/snapshots/'
//        }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.0'
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    group = 'org.spine3'
    version = '0.1'
}

project.ext {
    PROTOBUF_VERSION = '3.0.0-alpha-3'
    PROTOBUF_DEPENDENCY = "com.google.protobuf:protoc:${project.PROTOBUF_VERSION}"

    MAVEN_REPOSITORY_URL = 'http://maven.teamdev.com/repository/spine'
}

def repositoryUserName = null
def repositoryUserPassword = null
Properties properties = new Properties()
File credentialsFile = file("credentials.properties")
if (credentialsFile.exists()) {
    properties.load(credentialsFile.newDataInputStream())

    repositoryUserName = properties.getProperty("user.name")
    repositoryUserPassword = properties.getProperty("user.password")
}

task removeSavedProtoNames << {
    File propsFile = file(getProtoPropertiesFilePath())
    if (propsFile.exists()) {
        propsFile.delete()
    }
}

build.dependsOn removeSavedProtoNames

String getProtoPropertiesFilePath() {
    return "${project(":core-java").projectDir}/src/res/protos.properties";
}

subprojects {
    apply plugin: 'java'
    apply plugin: "idea"
    apply plugin: 'com.google.protobuf'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compile group: 'com.google.guava', name: 'guava', version: '18.0'
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.10'
        compile group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.10'

        testCompile(group: 'junit', name: 'junit', version: '4.12') {
            exclude(module: 'hamcrest-core')
        }
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

        compile group: 'com.google.protobuf', name: 'protobuf-java', version: project.PROTOBUF_VERSION
    }

    idea.module {
        generatedSourceDirs += file("$projectDir/src/generated/main/java")
        testSourceDirs += file("$projectDir/src/generated/test/java")
    }

    sourceSets {
        main {
            proto.srcDirs = ["src/main/proto"]
            java.srcDirs = ["$projectDir/src/generated/main/java", "src/main/java"]
        }
    }

    protobuf {
        generatedFilesBaseDir = "$projectDir/src/generated"
        protoc {
            artifact = project.PROTOBUF_DEPENDENCY
        }
    }

    task saveProtoNames << {
        String javaSuffix = ".java"
        String orBuilderSuffix = "OrBuilder" + javaSuffix
        ["$projectDir/src/generated/main/java", "$projectDir/src/generated/test/java"].each { String rootDirPath ->
            File rootDir = file(rootDirPath)
            if (rootDir.exists()) {
                File propsFileFolder = file("${project(":core-java").projectDir}/src/res")
                if (!propsFileFolder.exists()) {
                    propsFileFolder.mkdirs();
                }
                Properties props = new Properties() {
                    @Override
                    public synchronized Enumeration<Object> keys() {
                        return Collections.enumeration(new TreeSet<Object>(super.keySet()));
                    }
                };
                File propsFile = file(getProtoPropertiesFilePath())
                if (propsFile.exists()) {
                    props.load(propsFile.newDataInputStream())
                    // as Properties API does not support saving default table values, we have to rewrite them all
                    // Probably we should use Apache property API
                    Set<String> names = props.stringPropertyNames();
                    for (Iterator<String> i = names.iterator(); i.hasNext();) {
                        String propname = i.next();
                        props.setProperty(propname, props.getProperty(propname));
                    }
                }
                rootDir.listFiles().each {
                    String prefixName = it.name
                    fileTree(it).each {
                        if (it.name.endsWith(javaSuffix) && !it.name.endsWith(orBuilderSuffix)) {
                            String protoUrl = it.path.substring((rootDirPath + prefixName).length() + 2)
                            protoUrl = protoUrl.substring(0, protoUrl.length() - javaSuffix.length())
                            protoUrl = protoUrl.replaceAll('\\\\', ".")
                            String className = prefixName.replaceAll('\\\\', ".") + "." + protoUrl
                            props.setProperty(protoUrl, className)
                        }
                    }
                }
                BufferedWriter writer = propsFile.newWriter();
                props.store(writer, null)
                writer.close()
            }
        }
    }

    compileJava.dependsOn saveProtoNames

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId "${group}"
                artifactId "${project.name}"
                version "${project.version}"

                from components.java
            }
        }
    }
    publishing {
        repositories {
            maven {
                credentials {
//                    username project.extensions.extraProperties.properties.get("repositoryUserName")
//                    password project.extensions.extraProperties.properties.get("repositoryUserPassword")
                    username "${repositoryUserName}"
                    password "${repositoryUserPassword}"
                }
                url "${project.MAVEN_REPOSITORY_URL}"
            }
        }
    }
}

task readPublishingCredentials << {
    if (repositoryUserName == null || repositoryUserPassword == null) {
        throw new InvalidUserDataException("Please set up valid credentials.")
    }
    println "Publishing build as ${repositoryUserName}"
}

task publish << {}

subprojects.each { project ->
    def credentialsTask = getTasksByName("readPublishingCredentials", false)
    project.getTasksByName("publish", false).each { task ->
        task.dependsOn credentialsTask
    }
    publish.dependsOn project.getTasksByName("publish", false)
}

clean.dependsOn removeSavedProtoNames

