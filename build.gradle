def CREDENTIALS_LOCATION = "credentials.properties"

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.0'
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    group = 'org.spine3'
    version = '0.1'
}

project.ext {
    PROTOBUF_VERSION = '3.0.0-beta-1'
    PROTOBUF_DEPENDENCY = "com.google.protobuf:protoc:${project.PROTOBUF_VERSION}"

    MAVEN_REPOSITORY_URL = 'http://maven.teamdev.com/repository/spine'
    GENERATED_RESOURCES = "/generated/main/resources/"
    PROPERTIES_FILE_PATH = "${project.GENERATED_RESOURCES}protos/properties/"
    PROPERTIES_FILE_NAME = "proto_to_java_class.properties"
}

def repositoryUserName = null
def repositoryUserPassword = null
Properties properties = new Properties()
File credentialsFile = file(CREDENTIALS_LOCATION)
if (credentialsFile.exists()) {
    properties.load(credentialsFile.newDataInputStream())

    repositoryUserName = properties.getProperty("user.name")
    repositoryUserPassword = properties.getProperty("user.password")
}

String protoPropertiesFilePath() {
    return "${project(":core-java").projectDir}" + project.PROPERTIES_FILE_PATH + project.PROPERTIES_FILE_NAME;
}

String replaceFileSeparatorWithDot(String filePath) {
    return filePath.replace((char) File.separatorChar, (char) '.');
}

//todo:2015-09-10:mikhail.mikhaylov: Take care of duplicated code: use plugin here.
subprojects {

    buildscript {
        repositories {
            mavenLocal()
            maven {
                url 'http://maven.teamdev.com/repository/spine'
            }
            mavenCentral()
        }
    }

    apply plugin: 'java'
    apply plugin: "idea"
    apply plugin: 'com.google.protobuf'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    // Set Java home to point to JDK7 in gradle.properties file.
    //
    // For Mac OS X, it looks like this:
    //
    // # suppress inspection "UnusedProperty"
    // org.gradle.java.home=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compile group: 'com.google.guava', name: 'guava', version: '19.0-rc2'
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.10'
        compile group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.10'

        compile group: 'com.google.protobuf', name: 'protobuf-java', version: project.PROTOBUF_VERSION
        compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: project.PROTOBUF_VERSION

        testCompile(group: 'junit', name: 'junit', version: '4.12') {
            exclude(module: 'hamcrest-core')
        }
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    }

    idea.module {
        generatedSourceDirs += file("$projectDir/generated/main/java")
        testSourceDirs += file("$projectDir/generated/test/java")
    }

    sourceSets {
        main {
            proto.srcDirs = ["src/main/proto"]
            //TODO:2015-08-30:alexander.yevsyukov: Why don't we have the $projectDir prefix in the 2nd item?
            java.srcDirs = ["$projectDir/generated/main/java", "src/main/java"]

            resources.srcDirs = ["generated/main/resources"]
        }
    }

    protobuf {
        generatedFilesBaseDir = "$projectDir/generated"
        protoc {
            artifact = project.PROTOBUF_DEPENDENCY
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId "${group}"
                artifactId "${project.name}"
                version "${project.version}"

                from components.java
            }
        }
    }

    publishing {
        repositories {
            maven {
                credentials {
                    username "${repositoryUserName}"
                    password "${repositoryUserPassword}"
                }
                url "${project.MAVEN_REPOSITORY_URL}"
            }
        }
    }
}

task readPublishingCredentials << {
    if (repositoryUserName == null || repositoryUserPassword == null) {
        throw new InvalidUserDataException("Please set up valid credentials. " +
                "Credentials should be set in ${CREDENTIALS_LOCATION} file in the project\'s root.")
    }
    println "Publishing build as ${repositoryUserName}"
}

task publish << {}

subprojects.each { project ->
    def credentialsTask = getTasksByName("readPublishingCredentials", false)
    project.getTasksByName("publish", false).each { task ->
        task.dependsOn credentialsTask
    }
    publish.dependsOn project.getTasksByName("publish", false)
}

