//
// Copyright 2016, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.client;

// We put gRPC-based classes into `grpc` sub-package, which is annotated as `@Internal`
// to hide implementation details from the public API of the framework.
option (type_url_prefix) = "type.spine3.org";
option java_package = "org.spine3.client.grpc";
option java_multiple_files = true;
option java_outer_classname = "ClientServiceProto";
option java_generate_equals_and_hash = true;

import "spine/annotations.proto";
import "spine/base/command.proto";
import "spine/base/event.proto";
import "spine/base/response.proto";

// A topic of interest the client can subscribe and unsubscribe.
message Topic {
    //TODO:2016-01-14:alexander.yevsyukov: Define this type. E.g. there can be some structure, which describes many
    // points of interest at once. See Pub-sub for possible API inspiration. Chances are it's going to be one of underlying
    // implementations.
    string value = 1;
}

// A service for sending commands from clients.
service ClientService {
    // Request to handle a command.
    rpc Post(base.Command) returns (base.Response);

    // Request to receive events on the topic of interest.
    rpc Subscribe(Topic) returns (stream base.Event);

    // The request to unsubscribe from the topic.
    // This should close the stream opened by `Subscribe` call with the same `Topic` value.
    rpc Unsubscribe(Topic) returns (base.Response);
}
