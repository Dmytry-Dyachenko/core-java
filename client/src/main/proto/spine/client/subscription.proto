//
// Copyright 2017, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.client;

option (type_url_prefix) = "type.spine3.org";
option java_generate_equals_and_hash = true;
option java_multiple_files = true;
option java_outer_classname = "SubscriptionProto";
option java_package = "org.spine3.client";


import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

import "spine/annotations.proto";
import "spine/validate.proto";
import "spine/ui/language.proto";
import "spine/users/user_id.proto";
import "spine/users/tenant_id.proto";
import "spine/base/response.proto";
import "spine/client/entities.proto";
import "spine/time/zone_offset.proto";

// Topic identifier.
message TopicId {
    string uuid = 1;
}

// An object defining a unit of subscription.
//
// Defines the target (entities and criteria) of subscription.
message Topic {

    // Defines the entity of interest, e.g. entity type URL and a set of subscription criteria.
    Target target = 1;

    // Field mask to be applied to the entity updates applicable to this topic.
    //
    // Applied to each of the entity state messages before returning in scope of SubscriptionUpdate.
    google.protobuf.FieldMask field_mask = 2;

    // Service information about the environment in which the topic was created.
    TopicContext context = 3;

    // Reserved for utility fields.
    reserved 4 to 6;
}

message TopicContext {

    TopicId topic_id = 1 [(required) = true];

    // The ID of a tenant in a multi-tenant application.
    //
    // This field is not populated in single-tenant applications.
    //
    users.TenantId tenant_id = 2;

    // The user who created the topic.
    users.UserId actor = 3 [(required) = true];

    // The time when the topic was created.
    google.protobuf.Timestamp timestamp = 4 [(required) = true];

    // The zone offset from which the topic was created.
    time.ZoneOffset zone_offset = 5 [(required) = true];

    // The human language in which the topic updates are expected.
    //
    // If this attribute is not defined, or the specified language is not supported
    // the updates will be submitted in the default human language of the system.
    //
    ui.Language language = 6;
}

// Wrapped collection of read-side entity updates on a topic with the specific subscription ID.
message SubscriptionUpdate {

    // The subscription in which scope this update is propagated.
    Subscription subscription = 1;

    // Represents the base part of the response,
    //   i.e. whether the Topic subscription has been acked or not.
    base.Response response = 2;

    // Reserved for more subscription update attributes.
    reserved 3 to 9;

    // Entity updates packed as Any.
    //
    // Each of the update messages is affected by the field mask set for the current subscription.
    repeated google.protobuf.Any updates = 10;
}


// Subscription identifier.
message SubscriptionId {
    string uuid = 1;
}

// The subscription object.
//
// Created when the client subscribes to a topic inside the read-side implementation.
// Generally should not be created in the client code.
// See SubscriptionService#Subscribe(Topic).
message Subscription {

    // Unique identifier of the subscription.
    //
    // Must be unique in scope of a bounded context.
    SubscriptionId id = 1;

    // Represents TypeUrl of the target entity for this subscription.
    string type = 2;

    // Reserved for subscription attributes.
    reserved 3 to 10;
}
