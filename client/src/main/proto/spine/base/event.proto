//
// Copyright 2016, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.base;

option java_package = "org.spine3.base";
option java_multiple_files = true;
option java_outer_classname = "EventProto";
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

import "spine/base/command.proto";

// Event identifier.
message EventId {
    string uuid = 1;
}

// `Event` is something, which happened in the past.
//
// An event consists of two parts: event message and its context.
//
// The `message` is the domain model part of the event. Event messages are formulated in the past tense.
// The type of the event is defined by the type of the enclosed message.
// When we speak about a 'command' as a typed thing, we refer to the message of the event.
//
// Event subscriber are associated with the type of the messages. There can be multiple subscribers
// per event type.
//
// The event context contains attributes common for all events. It can also contain additional attributes
// added by the code handling the event.
//
message Event {
    // The message of the event message wrapped into `Any`.
    google.protobuf.Any message = 1;

    // The context of the event.
    EventContext context = 2;
}

// Meta-information for an event.
message EventContext {
    // The id of the event.
    EventId event_id = 1;

    // When the event occurred.
    google.protobuf.Timestamp timestamp = 2;

    // The context of the command, which generated this event.
    CommandContext command_context = 3;

    // The id of the entity which generated the event.
    // Examples of event producers are: aggregates, process managers (which generate `CommandRouted`).
    google.protobuf.Any producer_id = 4;

    // The version of the entity after the event was applied.
    int32 version = 5;

    // Service attributes that the system wants to store in addition to the domain attributes
    // defined in the event message.
    map<string, google.protobuf.Any> attributes = 6;
}
