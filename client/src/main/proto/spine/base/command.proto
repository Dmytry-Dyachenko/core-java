//
// Copyright 2016, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.base;

option java_package = "org.spine3.base";
option java_outer_classname = "CommandProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

import "spine/base/user_id.proto";
import "spine/base/namespace.proto";
import "spine/time/zone_offset.proto";

// Command identifier.
message CommandId {
    string uuid = 1;
}

// `Command` is an instruction to do something.
//
// A command consists of two parts: command message and command context.
//
// The `message` is the domain model part of command. The type of the command is defined by
// the type of its message. When we speak about a 'command' as a typed thing, we refer to
// the message of the command.
//
// The context contains attributes common for all commands.
//
// A command can hold any valid Protobuf message, but in most cases, it would be a type
// defined in `commands.proto` file of the corresponding aggregate or process manager.
//
// There should be <strong>one and only one</strong> command handler associated with the type of the command.
//
message Command {
    // The message of the command wrapped into `Any`.
    google.protobuf.Any message = 1;

    // Service information about the environment in which the command was created.
    CommandContext context = 2;
}

// Meta-information about the command and the environment, which generated the command.
message CommandContext {
    // The id of the command.
    CommandId command_id = 1;

    // The user who created the command.
    UserId actor = 2;

    // Date/time at which the command was created.
    google.protobuf.Timestamp timestamp = 3;

    // The zone offset from which the command is made.
    time.ZoneOffset zone_offset = 4;

    // The `namespace` attribute must be defined for commands in multitenant applications.
    Namespace namespace = 5;
}

// Enumeration of possible failures when validating a command.
enum CommandValidationError {
    // Reserved value.
    UNKNOWN = 0;

    // The command type is not supported by the server.
    UNSUPPORTED_COMMAND = 1;

    // The command is supported but has invalid fields (e.g., marked as "required" but not set).
    INVALID_COMMAND = 2;

    // The command context does not have `namespace` attribute defined in a multitenant application.
    NAMESPACE_UNKNOWN = 3;
}

// This enumeration defines possible statuses of command processing.
enum CommandStatus {
    // Reserved value.
    UNDEFINED = 0;

    // The command has been received by backend and stored.
    RECEIVED = 1;

    // The command has been successfully handled.
    // Expect one or more events produced in as the result of handling this command.
    OK = 2;

    // There was an exception or another kind of technical error during command processing.
    ERROR = 3;

    // A business failure encountered during command processing.
    FAILURE = 4;
}
