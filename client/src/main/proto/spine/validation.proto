//
// Copyright 2016, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

// We do not define the package for this file to allow shorter options for user-defined types.
// This would allow to write...
//
//     [(required).is = true];
//
// instead of
//
//     [(spine.base.required).is = true];
//

option java_generate_equals_and_hash = false;
option java_multiple_files = true;
option java_outer_classname = "ValidationProto";
option java_package = "org.spine3.validation.options";

import "google/protobuf/descriptor.proto";


extend google.protobuf.MessageOptions {
    // The default format string for validation error message text.
    // The number of parameters and their types are determined by the type of field options.
    string default_message = 51001;
}

// TODO:2016-02-18:alexander.litus: obtain globally unique field number(s) from Google.

extend google.protobuf.FieldOptions {
    RequiredOption required = 51002;
    DecimalOption decimal = 51003;
    DigitsOption digits = 51004;
    TimeOption when = 51005;
    MaxOption max = 51006;
    MinOption min = 51007;
    PatternOption pattern = 51008;
    ValidOption valid = 51009;
}

// TODO:2016-03-25:alexander.litus: error messages format

// If the field type is `message`, it must be set to a non-default instance;
// if it is `string` or `bytes`, the value must not be an empty string or array.
// Other field types are not applicable.
// If the field is repeated, it must have at least one value set, and all its values must be valid.
//
// Example:
//
// MyMessage field = 1 [(required).is = true];
//
message RequiredOption {
    // The default error message format string.
    // The format parameter is the simple name of the missing field.
    option (default_message) = "'%s' must be set";

    // Specifies if the field is required. Must be set to true. Otherwise, the field is not validated.
    // The default value is false.
    bool is = 1;

    // A user-defined validation error format message.
    // The format parameters are the same as for the default message.
    string msg = 2;
}

// TODO:2016-03-14:alexander.litus: is this option really needed? Why not use min/max instead?
// Applicable only to numbers.
message DecimalOption {
    option (default_message) = "field value must fit into range";

    double min = 1;
    double max = 2;
    bool inclusive = 3;
    string msg = 4;
}

// The field value must be greater than (or equal to, if the `inclusive` parameter is true) the given minimum number.
// Is applicable only to numbers.
// Repeated fields are supported.
// This option is considered as not set only if both min and max options are not set,
// or if the `ignore` parameter is set to true.
//
// Example:
//
// double value = 1 [(min).is = 10.5, (min).inclusive = true];
//
// TODO:2016-03-25:alexander.litus: change options
message MinOption {
    // The default error message format string.
    // The format parameters are:
    // 1) the simple name of the field;
    // 2) "or equal to " string (if the `inclusive` parameter is true);
    // 3) the minimum number;
    // 4) an actual value of the field.
    option (default_message) = "'%s' must be greater than %s%s, actual: %s";

    // The minimum value of the field.
    // The default value is zero.
    double is = 1;

    // Specifies if the field can be equal to the minimum value.
    // The default value is false.
    bool inclusive = 2;

    // Set this property to true if it is needed to use only the `max` option.
    // The default value is false.
    bool ignore = 3;

    // A user-defined validation error format message.
    // The format parameters are the same as for the default message.
    string msg = 4;
}

// The field value must be less than (or equal to, if the `inclusive` option is true) the given maximum number.
// Is applicable only to numbers.
// Repeated fields are supported.
// This option is considered as not set only if both min and max options are not set,
// or if the `ignore` parameter is set to true.
//
// Example:
//
// double value = 1 [(max).is = 10.5, (max).inclusive = true, (min).ignore = true];
//
message MaxOption {
    // The default error message format string.
    // The format parameters are:
    // 1) the simple name of the field;
    // 2) "or equal to " string (if the `inclusive` parameter is true);
    // 3) the maximum number;
    // 4) an actual value of the field.
    option (default_message) = "'%s' must be less than %s%s, actual: %s";

    // The maximum value of the field.
    // The default value is zero.
    double is = 1;

    // Specifies if the field can be equal to the maximum value.
    // The default value is false.
    bool inclusive = 2;

    // Set this property to true if it is needed to use only the `min` option.
    // The default value is false.
    bool ignore = 3;

    // A user-defined validation error format message.
    // The format parameters are the same as for the default message.
    string msg = 4;
}

// The field value must be a number with the certain integral/fractional digit count.
// Is applicable only to numbers.
// Repeated fields are supported.
// This option is considered as not set if either `integer_max` or `fraction_max` parameter is not set (is zero).
//
// Example:
//
// double value = 1 [(digits).integer_max = 2, (digits).fraction_max = 2];
//
message DigitsOption {
    // The default error message format string.
    // The format parameters are:
    // 1) the simple name of the field;
    // 2) max integral digit count;
    // 3) max fractional digit count;
    // 4) actual integral digit count;
    // 5) actual fractional digit count;
    option (default_message) = "'%s' number is out of bounds, expected: <%s max digits>.<%s max digits>, actual: <%s digits>.<%s digits>";

    // Maximum count of integral digits of the number (inclusive).
    // Must be greater than zero.
    int32 integer_max = 1;

    // Maximum count of fractional digits of the number (inclusive).
    // Must be greater than zero.
    int32 fraction_max = 2;

    // A user-defined validation error format message.
    // The format parameters are the same as for the default message.
    string msg = 3;
}

// The field value is a Timestamp which points to the moment in the future or the past.
// Is applicable only to Timestamps.
// Repeated fields are supported.
//
// Example:
//
// google.protobuf.Timestamp field = 1 [(when).in = FUTURE];
//
message TimeOption {
    // The default error message format string.
    // The format parameters are:
    // 1) the simple name of the field;
    // 2) "past" or "future" string, depending on the restriction.
    option (default_message) = "'%s' must be a timestamp in the %s";

    // Defines a restriction for the timestamp.
    Time in = 1;

    // A user-defined validation error format message.
    // The format parameters are the same as for the default message.
    string msg = 2;
}

// This enumeration defines restriction for date/time values.
enum Time {
    // The default value (if the time option is not set).
    UNDEFINED = 0;

    // The value must be in the past.
    PAST = 1;

    // The value must be in the future.
    FUTURE = 2;
}

// A string field value must match the given regular expression.
// Is applicable only to strings.
// Repeated fields are supported.
//
// Example:
//
// string field = 1 [(pattern).regex = FUTURE];
//
message PatternOption {
    // The default error message format string.
    // The format parameters are:
    // 1) the simple name of the field;
    // 2) the regular expression to which the value must match;
    // 3) an actual field value.
    option (default_message) = "'%s' must match the regular expression: '%s', found: '%s'";

    // The regular expression to match.
    string regex = 1;

    // The regex flag.
    int32 flag = 2;

    // A user-defined validation error format message.
    // The format parameters are the same as for the default message.
    string msg = 3;
}

// Specifies if the message field value is validated.
// Is applicable only to messages.
// Repeated fields are supported.
//
// Example:
//
// MyMessage field = 1 [(valid).is = true];
//
message ValidOption {
    // The default error message format string for the field.
    // 1) the simple name of the field;
    // 2) an error message describing invalid field's properties.
    option (default_message) = "'%s' message field value must have valid properties, error message: <%s>";

    // If it is true, the message's fields are validated.
    // The default value is false.
    bool is = 1;

    // A user-defined validation error format message.
    // The format parameters are the same as for the default message.
    string msg = 2;
}
