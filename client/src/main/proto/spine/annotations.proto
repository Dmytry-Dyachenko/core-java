//
// Copyright 2016, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

// We do not define the package for this file to allow shorter options for user-defined types.
// This would allow to write:
//
//     option (internal) = true;
//
// instead of:
//
//      option (spine.base.internal) = true;
//

option (type_url_prefix) = "type.spine3.org";
option java_generate_equals_and_hash = false;
option java_multiple_files = true;
option java_outer_classname = "AnnotationsProto";
option java_package = "org.spine3.annotations";

import "google/protobuf/descriptor.proto";

extend google.protobuf.FieldOptions {
    // Indicates a field which is internal to Spine, not part of the public API, and should not be used by users of the framework.
    //
    // If you plan to implement an extension of the framework, which is going to be
    // wired into the framework, you may use the internal parts. Please consult with the Spine
    // team, as the internal APIs do not have the same stability API guarantee as public ones.
    //
    // See `SPI` option if you plan to write an extension of the framework.
    bool internal = 58000;

    // Indicates a file which contains elements of Service Provider Interface (SPI).
    // SPI is used to enable framework extension and replaceable components (implement a new storage, etc).
    // See "Effective Java 2nd Edition", chapter 2, item 1 for more info about service provider framework pattern.
    bool SPI = 58001;

    // Indicates a field that can change at any time, and has no guarantee of API stability and backward-compatibility.
    //
    // Usage guidelines:
    // 1. This annotation is used only on public API. Internal interfaces should not use it.
    // 2. This annotation can only be added to new API. Adding it to an existing API is considered API-breaking.
    // 3. Removing this annotation from an API gives it stable status.
    bool experimental = 58002;

    // Signifies that a public API is subject to incompatible changes, or even removal, in a future release.
    // An API bearing this annotation is exempt from any compatibility guarantees made by its containing library.
    // Note that the presence of this annotation implies nothing about the quality of the API in question,
    // only the fact that it is not "API-frozen."
    // It is generally safe for applications to depend on beta APIs, at the cost of some extra work during upgrades.
    bool beta = 58003;
}

extend google.protobuf.MessageOptions {
    // Indicates a file which is internal to Spine, not part of the public API, and should not be used by users of the framework.
    // See more info in `annotations.proto`.
    bool internal_type = 58100;

    // Indicates a file which contains elements of Service Provider Interface (SPI).
    // See more info in `annotations.proto`.
    bool SPI_type = 58101;

    // Indicates a public API that can change at any time, and has no guarantee of API stability and backward-compatibility.
    // See more info in `annotations.proto`.
    bool experimental_type = 58102;

    // Signifies that a public API is subject to incompatible changes, or even removal, in a future release.
    // See more info in `annotations.proto`.
    bool beta_type = 58103;
}

extend google.protobuf.FileOptions {
    // Indicates a file which should not be used by users of the framework.
    // See more info in `annotations.proto`.
    bool internal_all = 58200;

    // Indicates a file which contains elements of Service Provider Interface (SPI).
    // See more info in `annotations.proto`.
    bool SPI_all = 58201;

    // Indicates a public API that can change at any time, and has no guarantee of API stability and backward-compatibility.
    // See more info in `annotations.proto`.
    bool experimental_all = 58202;

    // Signifies that a public API is subject to incompatible changes, or even removal, in a future release.
    // See more info in `annotations.proto`.
    bool beta_all = 58203;

    // Specifies a type URL prefix for all types within a file.
    // This type URL will be used when packing messages into `Any`.
    // See `any.proto` for more details.
    string type_url_prefix = 58204; // NOTE: this field number is used in `tools` project,
                                    // ProtoToJavaMapperPlugin (update it there on changing).
}

extend google.protobuf.ServiceOptions {
    // Indicates that the service is a part of Service Provider Interface (SPI).
    bool SPI_service = 58300;
}
